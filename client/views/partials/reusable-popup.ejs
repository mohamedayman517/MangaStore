<!-- Reusable Popup Modal -->
<div class="hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 min-w-72 popup" id="reusable-popup" style="z-index: 999999 !important;">
  <div class="relative p-4 w-full max-w-md max-h-full">
    <div class="bg-white rounded-lg shadow dark:bg-gray-700 px-6 py-4 pt-0">
      <style>
        /* Popup button styles (high visibility) */
        #popup-actions { gap: .75rem; }
        .popup-btn-primary {
          background: #16a34a !important; /* green-600 */
          color: #fff !important;
          padding: .6rem 1.1rem !important;
          border-radius: .5rem !important;
          font-weight: 600 !important;
          box-shadow: 0 4px 10px rgba(0,0,0,.15) !important;
        }
        .popup-btn-primary:hover { filter: brightness(0.95); }
        .popup-btn-secondary {
          background: #374151 !important; /* gray-700 */
          color: #fff !important;
          padding: .6rem 1.1rem !important;
          border-radius: .5rem !important;
          font-weight: 500 !important;
          box-shadow: 0 2px 8px rgba(0,0,0,.12) !important;
        }
      </style>
      <!-- Header -->
      <div class="flex items-center justify-between py-5 border-b rounded-t dark:border-gray-600">
        <h3 id="popup-title" class="text-lg font-semibold text-gray-900 dark:text-white">Popup</h3>
        <button type="button" class="close-popup popup-btn-secondary" style="margin-left:auto;">
          <svg class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
          </svg>
        </button>
      </div>
      <!-- Content -->
      <div id="popup-content" class="py-4 text-gray-800 dark:text-gray-100"></div>
      <!-- Footer -->
      <div id="popup-actions" class="flex justify-end gap-4 mt-4">
        <button id="popup-cancel" class="close-popup popup-btn-secondary">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
  (function () {
    const popupEl = document.getElementById('reusable-popup');
    const titleEl = document.getElementById('popup-title');
    const contentEl = document.getElementById('popup-content');
    const actionsEl = document.getElementById('popup-actions');

    function clearActions() {
      // Keep the Close button; remove dynamically added ones
      const buttons = Array.from(actionsEl.querySelectorAll('button'));
      buttons.forEach((btn) => { if (!btn.classList.contains('close-popup')) btn.remove(); });
    }

    function createButton(cfg) {
      const btn = document.createElement('button');
      if (cfg.id) btn.id = cfg.id;
      btn.textContent = cfg.text || 'OK';
      // Default to prominent primary style unless custom class provided
      btn.className = cfg.class || 'popup-btn-primary';
      btn.addEventListener('click', (e) => {
        try { cfg.onClick && cfg.onClick(e); } catch (err) { console.error(err); }
        // Do not auto-close if preventClose set
        if (!cfg.preventClose) hide();
      });
      return btn;
    }

    function showBase({ title, bodyHtml, actions }) {
      titleEl.textContent = title || 'Popup';
      contentEl.innerHTML = bodyHtml || '';
      clearActions();
      if (Array.isArray(actions)) {
        actions.forEach((a) => actionsEl.insertBefore(createButton(a), actionsEl.querySelector('.close-popup')));
      }
      // Ensure popup is last in body to avoid stacking context issues
      try {
        if (popupEl.parentElement !== document.body) {
          document.body.appendChild(popupEl);
        } else {
          document.body.appendChild(popupEl); // move to end
        }
      } catch (_) {}
      popupEl.classList.remove('hidden');
    }

    function hide() {
      popupEl.classList.add('hidden');
    }

    // Public API
    window.popup = {
      show({ title, message, actions } = {}) {
        showBase({ title, bodyHtml: message ? `<p>${message}</p>` : '', actions });
      },
      showForm({ title, fields = [], confirmText = 'Submit', submitText, actions = [], onSubmit } = {}) {
        const formHtml = `
          <form id="popup-form" class="grid gap-4">
            <div id="popup-error" class="col-span-2 text-sm text-red-600 hidden"></div>
            ${fields.map(f => {
              const req = f.required ? 'required' : '';
              const nameAttr = f.name ? `name="${f.name}"` : '';
              if (f.type === 'textarea') {
                return `<div class="col-span-2"><label class="block mb-1 text-sm font-medium">${f.label || ''}</label><textarea id="${f.id || ''}" ${nameAttr} placeholder="${f.placeholder || ''}" ${req} class="border rounded w-full p-2"></textarea></div>`;
              }
              else if (f.type === 'select') {
                const opts = (f.options || []).map(o => `<option value="${o.value}">${o.label}</option>`).join('');
                return `<div class="col-span-2"><label class="block mb-1 text-sm font-medium">${f.label || ''}</label><select id="${f.id || ''}" ${nameAttr} ${req} class="border rounded w-full p-2">${opts}</select></div>`;
              }
              return `<div class="col-span-2"><label class="block mb-1 text-sm font-medium">${f.label || ''}</label><input type="${f.type || 'text'}" id="${f.id || ''}" ${nameAttr} placeholder="${f.placeholder || ''}" ${req} class="border rounded w-full p-2" /></div>`;
            }).join('')}
          </form>
        `;

        // If caller expects a button with #popup-submit-btn, let them provide via actions. If not, create a default one.
        const hasSubmit = actions.some(a => a.id === 'popup-submit-btn');
        const mergedActions = hasSubmit ? actions : [
          { id: 'popup-submit-btn', text: (submitText || confirmText || 'Submit'), class: 'popup-btn-primary' },
          ...actions
        ];

        showBase({ title, bodyHtml: formHtml, actions: mergedActions });

        // Wire the default submit button to collect values and call onSubmit
        const submitBtn = document.getElementById('popup-submit-btn');
        const form = document.getElementById('popup-form');
        if (submitBtn && form) {
          const ui = {
            setError: (msg) => {
              const errEl = document.getElementById('popup-error');
              if (!errEl) return;
              errEl.textContent = msg || '';
              errEl.classList.toggle('hidden', !msg);
            },
            setLoading: (isLoading) => {
              submitBtn.disabled = !!isLoading;
              submitBtn.dataset._origText = submitBtn.dataset._origText || submitBtn.textContent;
              submitBtn.textContent = isLoading ? 'Processingâ€¦' : (submitBtn.dataset._origText || 'Submit');
            },
            close: hide,
          };

          submitBtn.addEventListener('click', (e) => {
            e.preventDefault();
            if (typeof onSubmit !== 'function') return;
            // Collect values by name attribute
            const values = {};
            form.querySelectorAll('[name]').forEach((el) => {
              if (el.type === 'checkbox') values[el.name] = !!el.checked;
              else values[el.name] = el.value;
            });
            try { onSubmit(values, ui); } catch (err) { console.error(err); ui.setError && ui.setError(err.message || 'Unexpected error'); }
          });
        }
      },
      hide
    };

    // Close handlers
    popupEl.querySelectorAll('.close-popup').forEach(btn => btn.addEventListener('click', hide));
  })();
</script>
