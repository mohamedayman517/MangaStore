<script>
  class PopupModal {
    constructor(options) {
      this.options = options;
      this.modalId = options.modalId || "crud-modal";
      this.closePopupId = options.closePopupId || "close-popup";
      this.modalElement = null;
      this.details = [];
      this.file = null;

      this.init();
    }

    init() {
      this.createModalStructure();
      this.registerEventListeners();
    }

    createModalStructure() {
      const modalTemplate = `
      <div class="!hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 min-w-72" id="popup">
        <div id="${
          this.modalId
        }" tabindex="-1" class="!hidden overflow-y-auto overflow-x-hidden z-50 w-full md:inset-0 h-[calc(100%-1rem)] max-h-full flex justify-center items-center">
          <div class="relative p-4 w-full max-w-md max-h-full">
            <div class="relative bg-white rounded-lg shadow dark:bg-gray-700 px-6 py-4 pt-0">
              <!-- Modal Header -->
              <div class="flex items-center justify-between py-5 border-b rounded-t dark:border-gray-600">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${this.options.title}</h3>
                <button type="button" id="${
                  this.closePopupId
                }" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
                  <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                  </svg>
                </button>
              </div>

              <!-- Modal Body -->
              <div class="grid gap-4 mb-4 grid-cols-2 mt-4">
                ${this.options.inputs.map((input) => this.createInputElement(input)).join("")}
                
                <!-- Product Details Section -->
                <div class="col-span-2">
                  <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Product Details</label>
                  <div class="grid gap-4 mb-4 grid-cols-2">
                    <div>
                      <input type="text" id="detail-key" 
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" 
                        placeholder="Key">
                    </div>
                    <div>
                      <input type="text" id="detail-value" 
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" 
                        placeholder="Value">
                    </div>
                    <div class="col-span-2 flex justify-end">
                      <button type="button" id="add-detail" 
                        class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800">
                        Add Detail
                      </button>
                    </div>
                  </div>
                  <div id="details-list" class="space-y-2"></div>
                </div>

                <!-- File Upload Section -->
                <div class="col-span-2">
                  <!-- Include your file upload structure here -->
                </div>
              </div>

              <button id="submit-btn" class="w-full text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800">
                ${this.options.submitText}
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

      const wrapper = document.createElement("div");
      wrapper.innerHTML = modalTemplate;
      this.modalElement = wrapper.firstElementChild;
      document.body.appendChild(this.modalElement);
    }

    createInputElement(config) {
      const classes = `bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500`;

      return `
      <div class="${config.colSpan || "col-span-2"}">
        <label for="${config.id}" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
          ${config.label}
        </label>
        ${
          config.type === "select"
            ? `
          <select id="${config.id}" class="${classes}">
            ${config.options.map((opt) => `<option value="${opt.value}">${opt.label}</option>`).join("")}
          </select>
        `
            : config.type === "textarea"
            ? `
          <textarea id="${config.id}" rows="4" class="${classes}" placeholder="${config.placeholder}"></textarea>
        `
            : `
          <input type="${config.type}" id="${config.id}" 
            class="${classes}" 
            placeholder="${config.placeholder}"
            ${config.required ? "required" : ""}>
        `
        }
      </div>
    `;
    }

    registerEventListeners() {
      // Close modal
      this.modalElement.querySelector(`#${this.closePopupId}`).addEventListener("click", () => this.close());

      // Add detail
      this.modalElement.querySelector("#add-detail").addEventListener("click", () => {
        const key = this.modalElement.querySelector("#detail-key").value;
        const value = this.modalElement.querySelector("#detail-value").value;

        if (key && value) {
          this.details.push({ key, value });
          this.updateDetailsList();
          this.clearDetailInputs();
        }
      });

      // Submit handler
      this.modalElement.querySelector("#submit-btn").addEventListener("click", () => {
        const formData = new FormData();

        // Append main fields
        this.options.inputs.forEach((input) => {
          const value = this.modalElement.querySelector(`#${input.id}`).value;
          formData.append(input.id, value);
        });

        // Append details
        this.details.forEach((detail, index) => {
          formData.append(`details[${index}][key]`, detail.key);
          formData.append(`details[${index}][value]`, detail.value);
        });

        // Append file
        if (this.file) {
          formData.append("image", this.file);
        }

        // Log FormData entries
        for (const [key, value] of formData.entries()) {
          console.log(key, value);
        }

        this.options.onSubmit?.(formData);
      });
    }

    updateDetailsList() {
      const list = this.modalElement.querySelector("#details-list");
      list.innerHTML = this.details
        .map(
          (detail, index) => `
      <div class="flex justify-between items-center bg-gray-100 dark:bg-gray-600 p-2 rounded">
        <span>${detail.key}: ${detail.value}</span>
        <button type="button" class="text-red-500 hover:text-red-700" 
          onclick="this.closest('div').remove(); this.details.splice(${index}, 1);">
          âœ•
        </button>
      </div>
    `
        )
        .join("");
    }

    clearDetailInputs() {
      this.modalElement.querySelector("#detail-key").value = "";
      this.modalElement.querySelector("#detail-value").value = "";
    }

    open() {
      this.modalElement.classList.remove("!hidden");
      this.isOpen = true;
    }

    close() {
      this.modalElement.classList.add("!hidden");
      this.isOpen = false;
    }

    destroy() {
      this.modalElement.remove();
      // Cleanup event listeners
    }
  }
</script>
