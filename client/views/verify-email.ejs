<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include("./partials/meta") %>
    <title>Activate Your Account</title>
    <link rel="stylesheet" href="/css/build.min.css" />
  </head>
  <body class="bg-background-light dark:bg-background-dark">
    <%- include("./partials/header") %> <%- include("./partials/alerts-popups") %>
    <main class="min-h-screen flex justify-center items-center">
      <div class="max-w-xl mx-auto my-20 p-8 bg-primary-light/70 dark:bg-primary-dark rounded-lg shadow-lg text-center">
        <i class="fas fa-envelope-open-text text-5xl text-secondary-light dark:text-secondary-dark mb-6"></i>
        <h2 class="text-2xl font-bold mb-4 text-secondary-light dark:text-secondary-dark">Verification Email Sent!</h2>
        <div class="mb-8 font-medium">
          <p class="mb-2">
            We've sent a verification link to <%= email %>. Please check your inbox and click on the link to activate
            your account.
          </p>
          <p>You need to verify your email before you can use all the features of our manga store.</p>
        </div>

        <div class="flex justify-center gap-3">
          <button
            id="resendBtn"
            class="relative overflow-hidden bg-secondary-light dark:bg-secondary-dark hover:bg-secondary-light/70 dark:hover:bg-secondary-dark/70 text-text-light dark:text-text-dark font-bold py-2 px-4 rounded">
            <span
              id="cooldownOverlay"
              class="absolute top-0 left-0 h-full bg-gray-500/50 transition-all duration-1000"
              style="width: 0%"></span>
            <span id="resendText" class="relative z-10">Resend Email</span>
          </button>
          <a href="/logout" class="border border-gray-400 hover:bg-gray-200 text-gray-700 font-bold py-2 px-4 rounded"
            >Logout</a
          >
        </div>

        <div class="mt-3">
          <small id="triesMessage" class="text-accent-light dark:text-text-dark">You have 3 tries remaining.</small>
        </div>
      </div>
    </main>

    <%- include("./partials/footer") %>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const resendBtn = document.getElementById("resendBtn");
        const resendText = document.getElementById("resendText");
        const cooldownOverlay = document.getElementById("cooldownOverlay");
        const triesMessage = document.getElementById("triesMessage");
        // Namespace keys per logged-in user to avoid stale cooldown after switching accounts
        const uid = "<%= uid || '' %>";
        const TRIES_KEY = uid ? `resendTries:${uid}` : "resendTries";
        const COOLDOWN_KEY = uid ? `cooldownUntil:${uid}` : "cooldownUntil";
        const LAST_UID_KEY = "verifyEmail:lastUid";

        let tries = 3;
        let isCooldown = false;

        // Check local storage for tries and cooldown time
        const lastUid = localStorage.getItem(LAST_UID_KEY);
        if (uid && lastUid && lastUid !== uid) {
          // Different user: reset any old counters
          try { localStorage.removeItem(`resendTries:${lastUid}`); } catch (_) {}
          try { localStorage.removeItem(`cooldownUntil:${lastUid}`); } catch (_) {}
        }
        if (uid) localStorage.setItem(LAST_UID_KEY, uid);

        const savedTries = localStorage.getItem(TRIES_KEY);
        const cooldownUntil = localStorage.getItem(COOLDOWN_KEY);

        if (savedTries !== null) {
          tries = parseInt(savedTries);
        }

        if (cooldownUntil !== null && new Date().getTime() < parseInt(cooldownUntil)) {
          // Still in cooldown period
          startCooldown(parseInt(cooldownUntil) - new Date().getTime());
        }

        updateTriesMessage();

        resendBtn.addEventListener("click", function () {
          if (isCooldown || tries <= 0) return;

          // UI: loading state
          const originalText = resendText.textContent;
          resendBtn.disabled = true;
          resendBtn.classList.add("opacity-60", "cursor-not-allowed");
          resendText.textContent = "Sending...";

          // Client-side timeout to avoid long hanging requests
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort("timeout"), 15000);

          fetch("/resend-verification", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            signal: controller.signal,
          })
            .then(async (response) => {
              clearTimeout(timeoutId);
              if (!response.ok) {
                if (response.status === 429) {
                  const retry = Number(response.headers.get("Retry-After") || 60) * 1000;
                  startCooldown(retry);
                  throw new Error("Too many attempts. Please wait and try again.");
                }
                const ct = response.headers.get("content-type") || "";
                const data = ct.includes("application/json") ? await response.json() : { message: await response.text() };
                throw new Error(data.message || "Failed to resend verification email");
              }
              return response.json();
            })
            .then((data) => {
              if (data.success) {
                tries--;
                localStorage.setItem(TRIES_KEY, tries);
                updateTriesMessage();

                // Cooldown: 1min for first 2 tries, then 15min
                if (tries > 0) {
                  startCooldown(60000);
                } else {
                  startCooldown(15 * 60000);
                }
                try { successAlert("Verification email sent!"); } catch (_) {}
              } else {
                try { errorAlert("Failed to resend verification email. " + (data.message || "")); } catch (_) { }
              }
            })
            .catch((error) => {
              if (error?.name === "AbortError") {
                try { errorAlert("Request timed out. Please check your connection and try again."); } catch (_) {}
              } else {
                console.error("Error:", error);
                try { errorAlert(error?.message || "An error occurred while trying to resend the verification email."); } catch (_) {}
              }
            })
            .finally(() => {
              // Restore button state if not in cooldown
              if (!isCooldown) {
                resendBtn.disabled = false;
                resendBtn.classList.remove("opacity-60", "cursor-not-allowed");
                resendText.textContent = originalText;
              }
            });
        });

        function startCooldown(duration) {
          isCooldown = true;
          resendBtn.classList.add("disabled", "opacity-60", "cursor-not-allowed");

          const startTime = new Date().getTime();
          const endTime = startTime + duration;
          localStorage.setItem(COOLDOWN_KEY, endTime);

          // Update cooldown UI
          const updateCooldown = () => {
            const currentTime = new Date().getTime();
            const timeLeft = endTime - currentTime;

            if (timeLeft <= 0) {
              // Cooldown finished
              clearInterval(intervalId);
              isCooldown = false;
              resendBtn.classList.remove("disabled");
              resendText.textContent = "Resend Email";
              cooldownOverlay.style.width = "0%";
              localStorage.removeItem("cooldownUntil");
              return;
            }

            const minutes = Math.floor(timeLeft / 60000);
            const seconds = Math.floor((timeLeft % 60000) / 1000);
            resendText.textContent = `Wait ${minutes}:${seconds.toString().padStart(2, "0")}`;

            // Update overlay width based on remaining time
            const percentComplete = 100 - (timeLeft / duration) * 100;
            cooldownOverlay.style.width = `${percentComplete}%`;
          };

          updateCooldown();
          const intervalId = setInterval(updateCooldown, 1000);
        }

        function updateTriesMessage() {
          if (tries <= 0) {
            triesMessage.textContent = "You have no more tries. Please wait for the cooldown to finish.";
          } else {
            triesMessage.textContent = `You have ${tries} ${tries === 1 ? "try" : "tries"} remaining.`;
          }
        }
      });
    </script>
  </body>
</html>
